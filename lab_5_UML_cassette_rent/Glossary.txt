USE CASE DIAGRAM
Варіант використання є послідовністю дій, виконуваних системою у відповідь на подію, ініційовану деяким зовнішнім об'єктом (дійовою особою). Він зображує типову взаємодію між користувачем
та системою. На діаграмі варіантів використання показано взаємодію між варіантами використання та дійовими особами. Вона відображає вимоги до системи з точки зору користувача. Тобто
варіанти використання - це функції, виконувані системою, а дійові особи - це зацікавлені особи (stakeholders) стосовно створюваної системи.
Client - користувач каталогу.
regular_client - додатковий клас, наслідує Client, має додатковий функціонал.
Seller - також дійова особа, опрацьовує запити клієнта, редагує каталог.
Catalog - каталог касет, що має наступний функціонал:
- chose the cassette - вибір кассети для оренди(для Client, regular_client);
- give advice to add new cassette - запит на збільшення каталогу якоюсь касетою(тільки для regular_client);
- return the cassette - повернути касету до каталогу(для Client, regular_client);
- is person a regular client - перевірка чи є вказаний клієнт - регулярним(тільки для Seller).
- is cassette in catalog - перевіряє чи взагалі вказана кассета зареєстрована в системі, також чи доступна вона для оренди(тільки для Seller).
- when selected cassette will be back - повертає час, що залишився до кінця оренди вказаної касети(тільки для Seller).

SEQUENCE DIAGRAMS
Діаграми послідовності зображують потік (течію) подій, які відбуваються в межах варіанту використання. На діаграмі послідовності об'єкт зображується прямокутником, від якого донизу
проведена пунктирна вертикальна лінія. Ця лінія носить назву "лінії життя" (lifeline) об'єкта. Вона є фрагментом життєвого циклу об'єкта в процесі взаємодії. Кожне повідомлення
представляється у вигляді стрілки між лініями життя двох об'єктів. Повідомлення з'являються у порядку, в якому вони зображені на сторінці згори донизу та відповідно своїм номерам. Кожне
повідомлення може містити ім'я, аргументи та деяку інформацію. Крім того можна показати само-делегування (self-delegation) - повідомлення, яке об'єкт надсилає собі, при цьому стрілка
повідомлення вказує на ту саму лінію життя.
Client - клас, що представляє клієнта каталогу.
new Client() - ініціалізація клієнта.
Catalog::array_of_clients = Client[] - массив клієнтів.
add_new_client() - додання клієнта до масиву клієнтів каталогу (якщо він відсутній).
chose_cassette(name) - вибір касети з іменем name.
Seller - клас, що представляє продавця каталогу.
check_cassette(name) - перевіряє наявність касети в каталозі (якщо присутня, то перевіряє чи не орендована вона).
Seller::check_is_client_regular(Client *) : bool - перевірка,чи орендував клієнт вже більше 5 касет (якщо так, то він стає regular_client).
chose_cassette(name) - повертаємось до цієї функції, якщо виконалось : касета є в каталозі, в доступі в даний момент.
cas->set_status() - зміна статусу касети на "даний момент використовується".

CLASS DIAGRAM
Діаграма класів визначає класи системи та зв'язки між ними. На діаграмах класів також відображаються дані-члени, або атрибути, класів, методи класів, або операції, та обмеження, які накладаються на
зв'язки між класами. Лінії, що з'єднуються класи, відображають взаємодію між класами.
Атрибут – це елемент інформації, пов'язаний з класом. Так як атрибути містяться всередині класу, вони приховані від інших класів. У зв'язку з цим, визначено властивість, які класи мають
право читати та змінювати атрибути. Ця властивість називається видимістю атрибута (attribute visibility).
У атрибута можна визначити 3 можливі значення цього параметра:
– Public (загальний, відкритий). Це значення видимості вказує, що атрибут буде видно усім іншим класам. Будь-який клас може переглянути чи змінити значення атрибута. Позначення: знак « + ».
– Private (приватний, закритий). Відповідний атрибут не видно жодним іншим класам. Позначення: знак « – ».
– Protected (захищений). Такий атрибут доступний лише самому класу і його нащадкам. Позначення: знак « # ».
Операції реалізують пов'язану з класом поведінку. Операція включає три частини - ім'я, параметри та тип значення, що повертається. Параметри - це аргументи, отримані операцією «на вході».
Тип значення, що повертається, стосується реузльтату дії операції. На діаграмі класів можна показувати як імена операцій, так і імена операцій разом з параметрами та типом значення, що
повертається.


OBJECT DIAGRAM
Діаграма об'єктів — діаграма, що відображає об'єкти та їх зв'язки в певний момент часу. Діаграма об'єктів може розглядатись як окремий випадок діаграми класів. Об'єкти можуть містити 
інформацію про власні значення, а не про опис.


STATE MAСHINE DIAGRAM
Діаграми стану визначають всі можливі стани, в яких може перебувати конкретний об'єкт, а також процес зміни станів об'єкта в результаті настання деяких подій. Вимога клієнта називається
подією (event), саме вони викликають перехід з одного стану в інший.
Елементами діаграми є:
- коло, що позначає початковий стан;
- коло з малим колом усередині, що позначає кінцевий стан;
- округлений прямокутник, що позначає окремий стан. Верхівка прямокутника містить назву стану, в середині може бути горизонтальна лінія, під якою записуються активності, що відбуваються в 
даному стані;
- стрілка, що позначає перехід. Назва події (якщо є), що викликає перехід, відзначається над/під стрілкою;
- товста горизонтальна лінія, яка є точкою об'єднання або розгалуження переходів.

ACTIVITY DIAGRAM
Діаграма активності - це діаграма, яка показує потік контролю від однієї діяльності до іншої. Вона показує паралельність, ветвіння, потоки керування та потоки об'єктів. Також дії 
розбиваються залежно від учасників. Тобто, це візуальне представлення графу діяльностей, вершинами якого є певні дії, а переходи відбуваються по завершенню дій. Діаграми активностей
будуються з обмеженої кількості фігур, з’єднаних стрілочками.
Найважливіші типи фігур:
- заокруглені прямокутники позначають дії;
- ромби позначають рішення;
- риски позначають початок (розподіл) чи кінець (об’єднання) паралельних активностей;
- чорний кружок позначає старт (початковий стан) процесу;
- чорний кружок в колі позначає кінець (кінцевий стан).
Стрілки ведуть від старту до кінця і позначають порядок в якому відбуваються активності.

COMPONENT DIAGRAM
Діаграми компонентів показують, як виглядає модель на фізичному рівні. На них представлені компоненти системи та зв'язки між ними. При цьому на такій діаграмі виділяють два типи
компонентів: виконувані компоненти та бібліотеки коду.
Кожен клас моделі (або підсистема) перетворюється у компонент вихідного коду. Після створення вони одразу додаються до діаграмі компонентів. Між окремими компонентами зображено залежності,
що відповідають залежностям на етапі компіляції чи виконання програми.
Компоненти з'єднані штриховою лінією, що відповідає залежностям між ними.
У системи може бути декілька діаграм компонентів, в залежності від числа підсистем або виконуваних файлів. Кожна підсистема є пакетом компонентів. У загальному випадку, пакети - це
сукупності компонентів.
Діаграми компонентів використовуються тими учасниками проекту, хто відповідає за компіляцію системи. З неї видно, в якому порядку треба компілювати компоненти, а також які виконувані
компоненти будуть створені системою. На такій діаграмі показано відповідність класів реалізованим компонентам. Вона потрібна там, де починається генерація коду.

COMMUNICATION DIAGRAM
Діаграма комунікацій призначена для ілюстрації динамічного вигляду системи. Вона зосереджена на структурній організації відправлення та отримання повідомлень між об'єктами. Щоб підтримувати
порядок повідомлень їх нумерують в хронологічному порядкую. Читання діаграми починається з повідомлення 1.0 та продовжується у напрямку пересилання повідомлень від об'єкта до об'єкта.
На діаграмі комунікацій представлена вся та інформація, яка була і на діаграмі послідовності, але вона по-іншому описує потік подій. З неї легше зрозуміти зв'язки між об'єктами, але
складніше дізнатися послідовність подій.

DEPLOYMENT DIAGRAM
Диаграмма розміщення відображає фізичні взаємозв'язки між програмними та системними компонентами системи. Кожен вузол на діаграмі розміщення представляє собою частину обладнання, компоненти
та об'єкти, що виконуються на цих вузлах. Компоненти відповідають представленню робочих екземплярів одиниць коду. Компоненти, що не мають представлення під час роботи програми на таких 
діаграмах не відображаються.
Діаграма розміщення використовується менеджером проекту, користувачами, архітектором системи та експлуатаційним персоналом, щоб зрозуміти фізичне розміщення системи та розташування
її окремих підсистем.
